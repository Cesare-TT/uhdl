Basic Syntax
============



This section will describe the most basic UHDL syntax rules.


Import UHDL
-----------

UHDL exists as a python package, so in every python file that uses UHDL, it must:

.. code-block:: python

    from uhdl import *



Define a Component
------------------

In UHDL, a verilog module is represented by a "Component", which is a python class.

When a new module needs to be defined, a new class is generated by inheriting from Component.

.. literalinclude :: example/case_empty_module/empty_module.py
    :language: python
    :linenos:
    :lines: 4-10

The above code inherits a new class called "EmpytModule" from Component. Correspondingly, this EmptyModule class, if instantiated and generates a verilog, will correspond to a verilog module also named "EmptyModule".

Tips:UHDL does not handle empty modules very well and therefore does not generate the correct Verilog code.





Basic Rule for Defining any Circuit Element
-------------------------------------------

To define any circuit element in UHDL, the following format needs to be used.


.. code-block:: python

    self.xxx = yyy

That is, all circuit elements that belong to a Component should be registered as properties of that Component, i.e. declared using "self.xxx".

This is due to the fact that within UHDL, the processing of circuit elements is done when it is registered into a Component.

This includes, but is not limited to, the following elements that should be registered:

1. The IO of the Component
2. Reg and Wire within the Component
3. Sub-Components instantiated within the Component

Of course, it is also possible to register a circuit element as an attribute of a Component via python's setattr method: the

.. code-block:: python

    setattr(component_inst, circui_element_var_name, circuit_element_inst)

When you cannot clearly distinguish whether a variable or object is a circuit element of UHDL (and it is highly recommended to think it through), a safe solution is to register all objects or variables as properties of Component, i.e. all defined and used in the form of self.xxx.


Define IO
---------

For IO, the keywords Input and Output are used in UHDL. IO is defined in a Component in the following form:



Define Write
------------


Define Reg
----------


The Template Mechansim
----------------------



Circuit Assignment
------------------



Passing Parameters to Component
-------------------------------

Instantiating a Component
-------------------------



Generate Verilog
----------------